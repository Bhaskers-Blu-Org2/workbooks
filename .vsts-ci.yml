steps:

# These bits would install via Provisionator normally, so try
# to keep them in sync. Ideally we'll be able to run Prov in
# VSTS+YAML like we do for our "big builds".

- task: DotNetCoreInstaller@0
  inputs:
    version: 2.1.4
  displayName: Install .NET Core

- task: NodeTool@0
  inputs:
    versionSpec: 8.x
  displayName: Install Node.js

- task: NuGetToolInstaller@0
  inputs:
    versionSpec: 4.6.1
  displayName: Install NuGet CLI

# This script runs both via bash (macOS/Linux) and cmd (Windows).
# Keep it both valid bash and batch or break it out conditionally.
- script: |
    echo System Environment
    set
    echo .NET Core Info
    dotnet --info
  displayName: Dump Environment

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Restore /p:Profile=$(msbuild.buildProfile)'
  displayName: Restore

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Build /p:Profile=$(msbuild.buildProfile)'
  displayName: Build

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Package /p:Profile=$(msbuild.buildProfile)'
  displayName: Package

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '_artifacts'
    ArtifactName: Artifacts
    publishLocation: Container
  displayName: Publish Artifacts

- task: MSBuild@1
  inputs:
    solution: CoreBuild.proj
    configuration: '$(msbuild.configuration)'
    msbuildArguments: '/t:Test /p:Profile=$(msbuild.buildProfile)'
  displayName: Run xUnit Tests

- task: PublishTestResults@2
  inputs:
    testRunner: XUnit
    testResultsFiles: '**/*.Tests.xml'
  displayName: Publish xUnit Test Results